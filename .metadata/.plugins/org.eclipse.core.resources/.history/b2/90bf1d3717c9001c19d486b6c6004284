package game_Utility;

import game_Object.Game_FieldBlock;

public class Game_BlockControl {
	Game_MinoFactory factory;
	Game_FieldBlock Field[][];
	
	int b1r, b1c, b2r, b2c, b3r, b3c, b4r, b4c;
	int posR = 0, posC = 4;
	int pastPosR = 0, pastPosC = 0;
	int[] blockArray, landingBlock;
	
	boolean checkBlockOverIndex = false;

	/*블록 에디터*/
	// 0 ~ 6
	int blockSpeices = 0;
	// 0 ~ 1..3
	int blockState = 0;
	
	
	public Game_BlockControl(Game_FieldBlock blockfield[][]) {
		this.Field = blockfield;
		factory = new Game_MinoFactory(Field, this);
	}
	
	public void leftMove() {
		this.blockArray = factory.getBlockArray();
		checkBlockOverIndex = checkOverIndex(factory.getBlockArray(), 1);
		if(!checkBlockOverIndex) {
			factory.minoManager(blockSpeices, blockState, pastPosR, posC, 0);
			posC--;
			factory.minoManager(blockSpeices, blockState, pastPosR, posC, 1);
		}
	}
	public void RightMove() {
		this.blockArray = factory.getBlockArray();
		checkBlockOverIndex = checkOverIndex(factory.getBlockArray(), 0);
		if(!checkBlockOverIndex) {
			factory.minoManager(blockSpeices, blockState, pastPosR, posC, 0);
			posC++;
			factory.minoManager(blockSpeices, blockState, pastPosR, posC, 1);
		}
//		pastPosC = posC;
	}
	
	public void blockCycle() {
		//이전 블록 지우기
		factory.minoManager(blockSpeices, blockState, pastPosR, posC, 0);
		//블록 내리기
		factory.minoManager(blockSpeices, blockState, posR, posC, 1);
		pastPosR = posR;
		posR++;
	}
	
	public void restartBlock() {
		posR = 0;
		posC = 4;
		pastPosR = 0;
	}

	
	public void setBlockState(int state) {
		this.blockState = state;
	}
	
	public boolean checkOverIndex(int[] array, int side) {
		if(side == 0) {
			for(int i = 0; i < 4; i++) {
				if((array[i] + 1) >= 10) {
					System.out.println("오른쪽 오버");
					return true;
				}
			}
			return false;
		}else {
			for(int i = 0; i < 4; i++) {
				if((array[i] - 1) <= -1) {
					System.out.println("왼쪽 오버");
					return true;
				}
			}
			return false;
		}
	}
	
	public boolean blockLanding() {
		landingBlock = factory.getBlockArrayRow();
		for(int i = 0; i < landingBlock.length; i++) {
			if(landingBlock[i] >= 19 /* || */) {
				//초기화
				factory.clearBlockTemp();
				restartBlock();
				return false;
			}
		}
		return true;
	}
	
}
